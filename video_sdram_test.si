// -------------------------
// MIT license, see LICENSE_MIT in Silice repo root
// https://github.com/sylefeb/Silice
// @sylefeb 2020

// debug palette
$$palette = {}
$$for i=0,255 do
$$  palette[1+i] = (i) | (((i<<1)&255)<<8) | (((i<<2)&255)<<16)
$$end

$$mode_640_480   = true
$$if ULX3S then
$$SDRAM_r512_w64 = true
$$else
$$SDRAM_r512_w64 = false
$$end

interface sdram_user {
  output  addr,
  output  rw,
  output  data_in,
  output  in_valid,
  output  wmask,
  input   data_out,
  input   done,
}

// -------------------------

algorithm frame_drawer(
  sdram_user    sd,
  input  uint1  sdram_clock,
  input  uint1  sdram_reset,
  input  uint1  vsync,
  input  uint32 framebuffer_base,
  output uint1  fbuffer,
) <autorun> {

  uint16 shift = 0;
  uint1  vsync_filtered = 0;

  // --- Palette
  simple_dualport_bram uint24 palette[] = {
    // palette from pre-processor table
$$  for i=0,255 do
$$if palette then
  $palette[1+i]$,
$$else
  $(i) | (((i<<1)&255)<<8) | (((i<<2)&255)<<16)$,
$$  end
$$end
  };

  subroutine bands(
    reads   palette,
    reads   shift,
    readwrites sd,
    input   uint1 buffer
  ) {
    uint10 pix_x   = 0;
    uint9  pix_y   = 0;
    uint8  pix_palidx = 0;

    pix_y = 0;
    while (pix_y < 480) {
      pix_x  = 0;
      while (pix_x < 640) {

        pix_palidx     = (pix_x + pix_y + shift);
        // write to sdram
        sd.addr       = framebuffer_base + 4 * (pix_x + 640 * (pix_y + 480 * buffer));
        palette.addr0 = pix_palidx;
        sd.data_in    = palette.rdata0;
        sd.in_valid = 1; // go ahead!
        while (!sd.done) { }
        // int8 wait = 5;
        // while (wait > 0) {
        //   wait = wait - 1;
        // }
        pix_x = pix_x + 1;
      }
      pix_y = pix_y + 1;
    }
  }

  vsync_filtered ::= vsync;

  sd.in_valid   := 0; // maintain low (pulses high when needed)
  sd.rw         := 1; // always writes
  sd.wmask      := 4b1111; // always writes all 4 bytes

  while (framebuffer_base == 0) { } // wait for framebuffer to be set

  while (1) {

    // draw a frame
    () <- bands <- (~fbuffer);

    // increment shift
    shift = (shift == 639) ? 0 : shift+1;

    // wait for frame to end
    while (vsync_filtered == 0) {}

    // swap buffers
    fbuffer = ~fbuffer;

  }

}

// -------------------------
